%define prefix %{buildprefix}

%global __os_install_post %{nil}

Summary: The CFEngine Configuration System
Name: cfengine-nova-hub
Version: @@VERSION@@
Release: @@RELEASE@@
Vendor: CFEngine AS
License: COSL
Group: Applications/System
URL: http://cfengine.com/
BuildRoot: %{_topdir}/%{name}-%{version}-%{release}-buildroot
Obsoletes: cfengine3, cfengine-community
Requires: coreutils gzip
Requires(pre): /usr/sbin/useradd, /usr/sbin/userdel, /usr/bin/getent
Requires(post): /usr/sbin/usermod, /bin/sed
AutoReqProv: no

%if %{?with_debugsym}%{!?with_debugsym:0}
%define debug_package {nil}
%endif

%description
CFEngine is the standalone, open-source datacenter management platform run by
leading enterprises since 1993. Customize your IT systems, align to network,
business and regulatory needs, monitor problems, automatically repair and
maintain systems.

%install
rm -rf $RPM_BUILD_ROOT

mkdir -p $RPM_BUILD_ROOT%{prefix}
cp -a %{prefix}/* $RPM_BUILD_ROOT%{prefix}
cp -a %{_basedir}/cfengine/dist/* $RPM_BUILD_ROOT

#Copy the modified init.d script according to the working directory
cp %{_basedir}/enterprise/misc/init.d/cfengine3 $RPM_BUILD_ROOT/etc/init.d/cfengine3

# Remove useless stuff

rm -f $RPM_BUILD_ROOT%{prefix}/lib/libpromises.la
rm -f $RPM_BUILD_ROOT%{prefix}/lib/libpromises.so
rm -f $RPM_BUILD_ROOT%{prefix}/lib/cfengine-enterprise.la
rm -f $RPM_BUILD_ROOT%{prefix}/lib/cfengine-report-collect.la
rm -f $RPM_BUILD_ROOT%{prefix}/bin/getfacl

# Hub does not need cf-upgrade, it is only present in host packages
rm -f $RPM_BUILD_ROOT%{prefix}/bin/cf-upgrade

rm -f $RPM_BUILD_ROOT%{prefix}/lib/php/cfmod.la
rm -f $RPM_BUILD_ROOT%{prefix}/lib/php/cfengine-enterprise-api.la

# GUI, REST, KB

cp -R %{_basedir}/mission-portal $RPM_BUILD_ROOT%prefix/share/GUI
cp -vR %{_basedir}/mission-portal/Apache-htaccess $RPM_BUILD_ROOT%prefix/share/GUI/htaccess
mkdir -p $RPM_BUILD_ROOT%prefix/share/GUI/api
cp -R %{_basedir}/nova/api/http/* $RPM_BUILD_ROOT%prefix/share/GUI/api
chmod 700 $RPM_BUILD_ROOT%prefix/share/GUI/api/dc-scripts/*.sh
cp -R %{_basedir}/nova/api/http/.htaccess $RPM_BUILD_ROOT%prefix/share/GUI/api
cp -R %{_basedir}/enterprise/misc/solaris_admin_files $RPM_BUILD_ROOT%prefix/share
rm -rf $RPM_BUILD_ROOT%prefix/share/GUI/tests
rm -rf $RPM_BUILD_ROOT%prefix/share/GUI/application/controllers/testing.php
rm -rf $RPM_BUILD_ROOT%prefix/share/GUI/unittest_index.php
rm -rf $RPM_BUILD_ROOT%prefix/share/GUI/unit_test.php


rm -rf $RPM_BUILD_ROOT%prefix/httpd/build
rm -rf $RPM_BUILD_ROOT%prefix/httpd/build
rm -rf $RPM_BUILD_ROOT%prefix/httpd/build
rm -rf $RPM_BUILD_ROOT%prefix/httpd/include
rm -f $RPM_BUILD_ROOT%prefix/httpd/htdocs/index.html
#remove binaries needed to compile apache ldap module
rm -rf $RPM_BUILD_ROOT%prefix/bin/apr-1-config
rm -rf $RPM_BUILD_ROOT%prefix/bin/apu-1-config

# Change development mode in MP to production mode and generate a session key
# Also change the client secret for Oauth2 api
sed "s/define('ENVIRONMENT', 'development')/define('ENVIRONMENT','production')/g" $RPM_BUILD_ROOT%prefix/share/GUI/index.php > $RPM_BUILD_ROOT%prefix/share/GUI/index.php.tmp

mv $RPM_BUILD_ROOT%prefix/share/GUI/index.php.tmp $RPM_BUILD_ROOT%prefix/share/GUI/index.php
rm -f $RPM_BUILD_ROOT%prefix/share/GUI/index.php.tmp

find $RPM_BUILD_ROOT%prefix/share/GUI -type f -exec sed -i 's/cfapi_log/syslog/' {} \;
# NovaBase
mkdir -p $RPM_BUILD_ROOT%prefix/share/NovaBase
cp -R $RPM_BUILD_ROOT%prefix/masterfiles $RPM_BUILD_ROOT%prefix/share/NovaBase/masterfiles
rm -rf $RPM_BUILD_ROOT%prefix/masterfiles

#Design center
mkdir -p ${RPM_BUILD_ROOT}%prefix/design-center
cp -R $RPM_BUILD_ROOT/sketches/* $RPM_BUILD_ROOT%prefix/share/NovaBase/sketches
rm -rf $RPM_BUILD_ROOT/sketches
cp -R $RPM_BUILD_ROOT/tools/* $RPM_BUILD_ROOT%prefix/design-center
rm -rf $RPM_BUILD_ROOT/tools




if [ -f %{prefix}/include/sqlite3.h ]; then
	sudo rm -rf %{prefix}/include
	sudo rm -f %{prefix}/lib/libsqlite3.so
fi

mkdir -p $RPM_BUILD_ROOT%prefix/share/db
cp %{_basedir}/nova/db/schema.sql $RPM_BUILD_ROOT%prefix/share/db/
cp %{_basedir}/nova/db/schema_settings.sql $RPM_BUILD_ROOT%prefix/share/db/
cp %{_basedir}/nova/db/ootb_settings.sql $RPM_BUILD_ROOT%prefix/share/db/



%clean
rm -rf $RPM_BUILD_ROOT

%pre
#
# Before starting the installation process we need to check that
# hostname -f returns a valid name. If that is not the case then
# we just abort the installation.
#
NAME=$(hostname -f)
if [ -z "$NAME" ];
then
	echo "hostname -f does not return a valid name, this is a configuration problem on this host."
	echo "Please make sure that hostname -f returns a valid name (Add an entry to /etc/hosts or "
	echo "fix the name resolution)."
	exit 1
fi

#
# We check if there is a server listening on port 80 or port 443.
# If one is found, then we try to shut it down by calling
# %{prefix}/httpd/bin/apachectl stop
# If that does not work, we abort the installation.
#
HTTPD_RUNNING=`netstat -natp | grep -E "(:80\s|:443\s).*LISTEN"`
if [ ! -z "$HTTPD_RUNNING" ];
then
	echo "There seems to be a server listening on either port 80 or 443"
	echo "Checking if it is part of CFEngine Enterprise"
	if [ -x %{prefix}/httpd/bin/apachectl ];
	then
		echo "Trying to shut down the process using apachectl from CFEngine Enterprise"
		%{prefix}/httpd/bin/apachectl stop
		HTTPD_RUNNING=`netstat -natp | grep -E "(:80\s|:443\s).*LISTEN"`
		if [ ! -z "$HTTPD_RUNNING" ];
		then
			echo "Could not shutdown the process, aborting the installation"
			exit 1
		fi
	else
		echo "No apachectl found, aborting the installation!"
		echo "Please kill the following processes before attempting a new installation"
		fuser -n tcp 80
		fuser -n tcp 443
		exit 1
	fi
fi

#
# We check if there is a postgres db server running already
#
PSQL_RUNNING=`netstat -natp | grep -E "(:5432\s).*LISTEN"`
if [ ! -z "$PSQL_RUNNING" ];
then
	echo "There seems to be a server listening on port 5432"
	echo "This might mean that there is a PostgreSQL server running on the machine already"
	echo "Checking if the Postgres installation belongs to a previous CFEngine deployment"
	PSQL_COMMAND=`ps -p `fuser -n tcp 5432 2>/dev/null` -o args=|cut -d' ' -f1`
	if [ ! -z "$PSQL_COMMAND" ];
	then
		if [ "$PSQL_COMMAND" == "%{prefix}/bin/postgres" ];
		then
			echo "The PostgreSQL server belongs to a previous CFEngine deployment, shutting it down."
			if [ -x "/var/cfengine/bin/pg_ctl" ];
			then
				(cd /tmp && su cfpostgres -c "/var/cfengine/bin/pg_ctl stop -D /var/cfengine/state/pg/data -m smart")
			else
				echo "No pg_ctl found at %{prefix}/bin/pg_ctl, aborting"
				exit 1
			fi
		else
			echo "The PostgreSQL is not from a previous CFEngine deployment"
			echo "This scenario is not supported, aborting installation"
			ps -p `fuser -n tcp 5432 2>/dev/null` -o args=
			exit 1
		fi
	else
		echo "There is a process listening on the PostgreSQL port but it is not PostgreSQL, aborting."
		echo -n "Command: "
		ps -p `fuser -n tcp 5432 2>/dev/null` -o args=
		echo "Please make sure that the process is not running before attempting the installation again."
		exit 1
	fi
	PSQL_FINAL_CHECK=`netstat -natp | grep -E "(:5432\s).*LISTEN"`
	if [ ! -z "$PSQL_FINAL_CHECK" ];
	then
		echo "There is still a process listening on 5432, please kill it before retrying the installation. Aborting."
		exit 1
	fi
fi

#
# We need a cfapache user for our web server
#
/usr/bin/getent passwd cfapache >/dev/null || /usr/sbin/useradd -M -r cfapache
/usr/bin/getent group cfapache >/dev/null || /usr/sbin/groupadd -r cfapache

#
# We check if there is a postgres user already, otherwise we create one
#
/usr/bin/getent passwd cfpostgres >/dev/null || /usr/sbin/useradd -M -r cfpostgres

#
# Backup htdocs
#
if [ -d %{prefix}/httpd/htdocs ]; then
	echo "A previous version of CFEngine Mission Portal was found,"
	echo "creating a backup of it in /tmp/cfengine-htdocs.tar.gz"
	tar zcf /tmp/cfengine-htdocs.tar.gz %{prefix}/httpd/htdocs
fi

%post

INSTLOG=/var/log/CFEngineHub-Install.log
exec > $INSTLOG 2>&1
set -x

PREFIX="%{prefix}"

#
# Register CFEngine initscript, if not yet.
#
if [ $1 -eq 1 ]; then
    chkconfig --add cfengine3
fi

#
# Make sure the cfapache user has a home folder and populate it
#
MP_APACHE_USER=cfapache
if [ -d $PREFIX/$MP_APACHE_USER ];
then
	echo "cfapache folder already exists, deleting it"
	rm -rf $PREFIX/$MP_APACHE_USER
fi
/usr/sbin/usermod -d $PREFIX/$MP_APACHE_USER $MP_APACHE_USER
mkdir -p $PREFIX/$MP_APACHE_USER/.ssh
chown -R $MP_APACHE_USER:$MP_APACHE_USER $PREFIX/$MP_APACHE_USER
echo "Host *
      StrictHostKeyChecking no
	  UserKnownHostsFile=/dev/null" >> $PREFIX/$MP_APACHE_USER/.ssh/config

#
# Use default policy in case of fresh installation.
if [ ! -f $PREFIX/masterfiles/promises.cf ]; then
 /bin/cp -R $PREFIX/share/NovaBase/masterfiles $PREFIX/
 touch $PREFIX/masterfiles/cf_promises_validated
 find $PREFIX/masterfiles -type d -exec chmod 700 {} \;
 find $PREFIX/masterfiles -type f -exec chmod 600 {} \;
fi

if [ -f $PREFIX/lib/php/mcrypt.so ]; then
  /bin/rm -f $PREFIX/lib/php/mcrypt.*
fi

if [ -f $PREFIX/lib/php/curl.so ]; then
  /bin/rm -f $PREFIX/lib/php/curl.*
fi


#
#Copy necessary Files and permissions
#
cp $PREFIX/lib/php/*.ini $PREFIX/httpd/php/lib
cp $PREFIX/lib/php/*.so $PREFIX/httpd/php/lib/php/extensions/no-debug-non-zts-20100525

#Change keys in files
NEW_UUID=$(dd if=/dev/urandom bs=1024 count=1 2>/dev/null | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
sed -i s/CFE_SESSION_KEY/"$NEW_UUID"/ $PREFIX/share/GUI/application/config/config.php
sed -i s/CFE_CLIENT_SECRET_KEY/"$NEW_UUID"/ $PREFIX/share/GUI/application/config/appsettings.php
sed -i s/CFE_CLIENT_SECRET_KEY/"$NEW_UUID"/ $PREFIX/share/db/ootb_settings.sql
cp -r $PREFIX/share/GUI/* $PREFIX/httpd/htdocs
mkdir -p $PREFIX/httpd/htdocs/tmp
mv $PREFIX/httpd/htdocs/htaccess $PREFIX/httpd/htdocs/.htaccess
chmod 755 $PREFIX/httpd
chown -R root:root $PREFIX/httpd/htdocs
chmod a+rx $PREFIX/httpd/htdocs/api/dc-scripts/*.sh
chmod a+rx $PREFIX/httpd/htdocs/api/dc-scripts/*.pl

# plugins directory, empty by default
mkdir -p $PREFIX/plugins
chown -R root:root $PREFIX/plugins
chmod 700 $PREFIX/plugins

#these directories should be write able by apache
chown root:$MP_APACHE_USER $PREFIX/httpd/logs
chmod 775 $PREFIX/httpd/logs
chown $MP_APACHE_USER:$MP_APACHE_USER $PREFIX/httpd/htdocs/tmp
chown -R $MP_APACHE_USER:$MP_APACHE_USER $PREFIX/httpd/htdocs/api/static
chown $MP_APACHE_USER:$MP_APACHE_USER $PREFIX/httpd/htdocs/application/logs

# This folder is required for Design Center and Mission Portal to talk to each other
DCWORKDIR=/opt/cfengine
$PREFIX/design-center/bin/cf-sketch --inputs=$PREFIX/design-center --installsource=$PREFIX/share/NovaBase/sketches/cfsketches.json --install-all
mkdir -p $DCWORKDIR/userworkdir/admin/.ssh
mkdir -p $DCWORKDIR/stage_backup
mkdir -p $DCWORKDIR/dc-scripts
mkdir -p $DCWORKDIR/masterfiles_staging
mkdir -p $DCWORKDIR/masterfiles.git

touch $DCWORKDIR/userworkdir/admin/.ssh/id_rsa.pvt
chmod 600 $DCWORKDIR/userworkdir/admin/.ssh/id_rsa.pvt

cat > $DCWORKDIR/dc-scripts/params.sh <<EOHIPPUS
#!/bin/bash
ROOT="$DCWORKDIR/masterfiles_staging"
GIT_URL="$DCWORKDIR/masterfiles.git"
GIT_BRANCH="master"
GIT_WORKING_BRANCH="CF_WORKING_BRANCH"
GIT_EMAIL="default-committer@your-cfe-site.com"
GIT_AUTHOR="Default Committer"
PKEY="$DCWORKDIR/userworkdir/admin/.ssh/id_rsa.pvt"
SCRIPT_DIR="$PREFIX/httpd/htdocs/api/dc-scripts"
VCS_TYPE="GIT"
export PATH="\${PATH}:/var/cfengine/bin"
export PKEY="\${PKEY}"
export GIT_SSH="\${SCRIPT_DIR}/ssh-wrapper.sh"
EOHIPPUS

# The runfile key in the below JSON is not needed anymore, all the
# values in it are OK by default, especially the runfile location,
# which is the first element of repolist plus `/meta/api-runfile.cf`.

cat > $DCWORKDIR/userworkdir/admin/api-config.json <<EOHIPPUS
{
  "log":"STDERR",
  "log_level":"3",
  "repolist":["sketches"],
  "recognized_sources":["$PREFIX/design-center/sketches"],
  "constdata":"$PREFIX/design-center/tools/cf-sketch/constdata.conf",
  "vardata":"$DCWORKDIR/userworkdir/admin/masterfiles/sketches/meta/vardata.conf",
  "runfile": {"location":"$DCWORKDIR/userworkdir/admin/masterfiles/sketches/meta/api-runfile.cf"}
}
EOHIPPUS

chmod 700 $DCWORKDIR/dc-scripts/params.sh

chown -R $MP_APACHE_USER:$MP_APACHE_USER $DCWORKDIR/userworkdir
chown -R $MP_APACHE_USER:$MP_APACHE_USER $DCWORKDIR/dc-scripts
chown -R $MP_APACHE_USER:$MP_APACHE_USER $DCWORKDIR/stage_backup
chown -R $MP_APACHE_USER:$MP_APACHE_USER $DCWORKDIR/masterfiles.git

chown $MP_APACHE_USER:$MP_APACHE_USER $DCWORKDIR
cp -R $PREFIX/masterfiles/* $DCWORKDIR/masterfiles_staging
chown -R $MP_APACHE_USER:$MP_APACHE_USER $DCWORKDIR/masterfiles_staging

chmod 700 $DCWORKDIR/stage_backup
chmod -R 700 $DCWORKDIR/userworkdir

GIT=$PREFIX/bin/git
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT init")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT config user.email admin@cfengine.com")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT config user.name admin")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "echo -e '/cf_promise_*\n.*.sw[po]\n*~\n\\#*#' >.gitignore")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT add .gitignore")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT commit -m 'Ignore cf_promise_*'")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT add *")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT commit -m 'Initial pristine masterfiles'")

(cd $DCWORKDIR/ && su $MP_APACHE_USER -c "$GIT clone --no-hardlinks --bare $DCWORKDIR/masterfiles_staging $DCWORKDIR/masterfiles.git")
find "$DCWORKDIR/masterfiles.git" -type d -exec chmod 700 {} \;
find "$DCWORKDIR/masterfiles.git" -type f -exec chmod 600 {} \;

(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT branch CF_WORKING_BRANCH")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT remote rm origin")
(cd $DCWORKDIR/masterfiles_staging && su $MP_APACHE_USER -c "$GIT remote add origin $DCWORKDIR/masterfiles.git")

if [ ! -f /usr/bin/curl ]; then
     ln -sf $PREFIX/bin/curl /usr/bin/curl
fi


#
#MAN PAGE RELATED
#
MAN_CONFIG=""
MAN_PATH=""
if [ -f /etc/SuSE-release ];
then
# SuSE
    MAN_CONFIG="/etc/manpath.config"
    MAN_PATH="MANDATORY_MANPATH"
else
# RH/CentOS
    MAN_CONFIG="/etc/man.config"
    MAN_PATH="MANPATH"
fi

if [ -f "$MAN_CONFIG" ];
then
    MAN=`cat "$MAN_CONFIG"| grep cfengine`
    if [ -z "$MAN" ]; then
        echo "$MAN_PATH     $PREFIX/share/man" >> "$MAN_CONFIG"
    fi
fi

for i in cf-agent cf-promises cf-key cf-execd cf-serverd cf-monitord cf-runagent cf-hub;
do
    if [ -f $PREFIX/bin/$i -a -d /usr/local/sbin ]; then
        ln -sf $PREFIX/bin/$i /usr/local/sbin/$i || true
    fi
    if [ -f /usr/share/man/man8/$i.8.gz ]; then
        rm -f /usr/share/man/man8/$i.8.gz
    fi
    $PREFIX/bin/$i -M > /usr/share/man/man8/$i.8 && gzip /usr/share/man/man8/$i.8
done


#
# Generate a host key
#
if [ ! -f $PREFIX/ppkeys/localhost.priv ]; then
    $PREFIX/bin/cf-key >/dev/null || :
fi

if [ -f $PREFIX/bin/cf-twin ]; then
    /bin/rm $PREFIX/bin/cf-twin
fi
/bin/cp $PREFIX/lib/php/*.so $PREFIX/httpd/php/lib/php/extensions/no-debug-non-zts-20100525
/bin/cp $PREFIX/lib/php/*.ini $PREFIX/httpd/php/lib
/bin/cp $PREFIX/bin/cf-agent $PREFIX/bin/cf-twin

#
# Generate a certificate for Mission Portal
# The certificate will be named $(hostname -f).cert and the corresponding key should be named $(hostname -f).key.
#
CFENGINE_MP_DEFAULT_CERT_LOCATION="$PREFIX/httpd/ssl/certs"
CFENGINE_MP_DEFAULT_KEY_LOCATION="$PREFIX/httpd/ssl/private"
CFENGINE_OPENSSL="$PREFIX/bin/openssl"
mkdir -p $CFENGINE_MP_DEFAULT_CERT_LOCATION
mkdir -p $CFENGINE_MP_DEFAULT_KEY_LOCATION
CFENGINE_LOCALHOST=$(hostname -f)
CFENGINE_MP_CERT=$CFENGINE_MP_DEFAULT_CERT_LOCATION/$CFENGINE_LOCALHOST.cert
CFENGINE_MP_KEY=$CFENGINE_MP_DEFAULT_KEY_LOCATION/$CFENGINE_LOCALHOST.key
$CFENGINE_OPENSSL req -new -newkey rsa:4096 -days 99999 -nodes -x509 -subj "/C=NA/ST=NA/L=NA/O=SelfSigned/CN=$CFENGINE_LOCALHOST" -keyout $CFENGINE_MP_KEY  -out $CFENGINE_MP_CERT -config $PREFIX/ssl/openssl.cnf
#
# Modify the Apache configuration with the corresponding key and certificate
#
sed -i $PREFIX/httpd/conf/extra/httpd-ssl.conf -e s:INSERT_CERT_HERE:$CFENGINE_MP_CERT:g $PREFIX/httpd/conf/extra/httpd-ssl.conf
sed -i $PREFIX/httpd/conf/extra/httpd-ssl.conf -e s:INSERT_CERT_KEY_HERE:$CFENGINE_MP_KEY:g $PREFIX/httpd/conf/extra/httpd-ssl.conf

mkdir -p $PREFIX/config
$PREFIX/httpd/bin/apachectl start

#
#POSTGRES RELATED
#
if [ ! -d $PREFIX/state/pg/data ]; then
mkdir -p $PREFIX/state/pg/data
chown -R cfpostgres $PREFIX/state/pg
(cd /tmp && su cfpostgres -c "$PREFIX/bin/initdb -D $PREFIX/state/pg/data")
touch /var/log/postgresql.log
chown cfpostgres /var/log/postgresql.log

    # Generating a new postgresql.conf if enough total memory is present
    #
    # If total memory is lower than 8G, we use the default pgsql conf file
    # If total memory is beyond 64G, we use a shared_buffers of 16G
    # Otherwise, we use a shared_buffers equal to 25% of total memory
    total=`cat /proc/meminfo |grep "^MemTotal:.*[0-9]\+ kB"|awk '{print $2}'`

    echo "$total" | grep -q '^[0-9]\+$'
    if [ $? -ne 0 ] ;then
       echo "Error calculating total memory for setting postgresql shared_buffers";
    else
       upper=$(( 64 * 1024 * 1024 ))  #in KB
       lower=$(( 8 * 1024 * 1024 ))   #in KB

       if [ "$total" -gt "$lower" ]; then
           maint="2GB"
           if [ "$total" -ge "$upper" ]; then
               shared="16GB"
               effect="11GB"        #70% of 16G
           else
               shared=$(( $total * 25 / 100 / 1024 ))   #in MB
               shared="$shared""MB"
               effect=$(( $total * 70 / 100 / 1024 ))   #in MB
               effect="$effect""MB"
           fi
           sed -i -e "s/^.effective_cache_size.*/effective_cache_size=$effect/" $PREFIX/share/postgresql/postgresql.conf.cfengine
           sed -i -e "s/^shared_buffers.*/shared_buffers=$shared/" $PREFIX/share/postgresql/postgresql.conf.cfengine
           sed -i -e "s/^maintenance_work_mem.*/maintenance_work_mem=$maint/" $PREFIX/share/postgresql/postgresql.conf.cfengine
           cp $PREFIX/share/postgresql/postgresql.conf.cfengine $PREFIX/state/pg/data/postgresql.conf
           chown cfpostgres $PREFIX/state/pg/data/postgresql.conf
       else
          echo "Warning: not enough total memory needed to set shared_buffers=2GB"
       fi
    fi
fi

(cd /tmp && su cfpostgres -c "$PREFIX/bin/pg_ctl -w -D $PREFIX/state/pg/data -l /var/log/postgresql.log start")

#make sure that server is up and listening
TRYNO=1
LISTENING=no
echo -n "pinging pgsql server"
while [ $TRYNO -le 10 ]
do
    echo -n .
    ALIVE=$(cd /tmp && su cfpostgres -c "$PREFIX/bin/psql -l 1>/dev/null 2>/dev/null")

    if [ $? -eq 0 ];then
        LISTENING=yes
        break
    fi

    sleep 1
    TRYNO=`expr $TRYNO + 1`
done
echo done

if [ "$LISTENING" = "no" ]
 then
     echo "Couldnot create necessary database and users, make sure Postgres server is running.."
 else
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/createdb -E SQL_ASCII --lc-collate=C --lc-ctype=C -T template0 cfdb")
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfdb -f $PREFIX/share/db/schema.sql")
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/createuser -S -D -R -w $MP_APACHE_USER")
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/createuser -d -a -w root")

    #create database for MISSION PORTAL
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/createdb -E SQL_ASCII --lc-collate=C --lc-ctype=C -T template0 cfmp")
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfmp -f $PREFIX/share/GUI/phpcfenginenova/create_cfmppostgres_user.sql")
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfmp -f $PREFIX/share/GUI/phpcfenginenova/pgschema.sql")
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfmp -f $PREFIX/share/GUI/phpcfenginenova/ootb_import.sql")

    #import stored function for MP into cfdb
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfdb -f $PREFIX/share/GUI/phpcfenginenova/cfdb_import.sql")

    #create database for Hub internal data
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/createdb -E SQL_ASCII --lc-collate=C --lc-ctype=C -T template0 cfsettings")
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfsettings -f $PREFIX/share/db/schema_settings.sql")
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfsettings -f $PREFIX/share/db/ootb_settings.sql")

    #revoke create permission on public schema for cfdb database
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfdb") << EOF
    REVOKE CREATE ON SCHEMA public FROM public;
EOF

    #grant permission for apache user to use the cfdb database
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfdb") << EOF
    GRANT ALL ON DATABASE cfdb TO $MP_APACHE_USER;
EOF

    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfdb") << EOF
    GRANT SELECT, DELETE ON ALL TABLES IN SCHEMA PUBLIC TO $MP_APACHE_USER;
EOF

    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfdb") << EOF
    ALTER DEFAULT PRIVILEGES FOR ROLE root,cfpostgres IN SCHEMA PUBLIC GRANT SELECT ON TABLES TO PUBLIC;
EOF

    #grant permission for apache user to use the cfsettings database
    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfsettings") << EOF
    GRANT ALL ON DATABASE cfsettings TO $MP_APACHE_USER;
EOF

    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfsettings") << EOF
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $MP_APACHE_USER;
EOF

    (cd /tmp && su cfpostgres -c "$PREFIX/bin/psql cfsettings") << EOF
    ALTER DEFAULT PRIVILEGES FOR ROLE root,cfpostgres IN SCHEMA PUBLIC GRANT SELECT ON TABLES TO PUBLIC;
EOF

fi



#
#REDIS RELATED
#
cat > $PREFIX/config/redis.conf << EOF
daemonize yes
unixsocket /tmp/redis.sock
unixsocketperm 755
EOF

$PREFIX/bin/redis-server $PREFIX/config/redis.conf
$PREFIX/bin/cf-consumer

#
#Mission portal
#
CFE_ROBOT_PWD=$(dd if=/dev/urandom bs=1024 count=1 2>/dev/null | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
$PREFIX/httpd/php/bin/php $PREFIX/httpd/htdocs/index.php cli_tasks create_cfe_robot_user $CFE_ROBOT_PWD


exit 0

%preun

#
# Unregister CFEngine initscript.
#
ps aux | grep -v grep | grep cfengine > /dev/null

if [ $? -eq 0 ]; then
    service cfengine3 stop
fi

if [ $1 -eq 0 ]; then
    chkconfig --del cfengine3
fi

#
# Clean lock files created by initscript, if any
#
for i in cf-execd cf-serverd cf-monitord cf-hub; do
    rm -f /var/lock/$i /var/lock/subsys/$i
done

exit 0

%postun

if [ -f /etc/php.d/cfmod.ini ]; then
    rm -f /etc/php.d/cfmod.ini
    rm -f /etc/php.d/json.ini
    rm -f /etc/php.d/curl.ini
    rm -f /etc/php.d/cfengine-enterprise-api.ini
    rm -f /etc/php.d/mcrypt.ini
fi

if [ -f /etc/php5/conf.d/cfmod.ini ]; then
    rm -f /etc/php5/conf.d/cfmod.ini
    rm -f /etc/php5/conf.d/curl.ini
    rm -f /etc/php5/conf.d/cfengine-enterprise-api.ini
fi

if [ -f /usr/lib64/php/modules/cfmod.so ]; then
    rm -f /usr/lib64/php/modules/json.so
    rm -f /usr/lib64/php/modules/cfmod.so
    rm -f /usr/lib64/php/modules/curl.so
    rm -f /usr/lib64/php/modules/cfengine-enterprise-api.so
    rm -f /usr/lib64/php/modules/mcrypt.so
fi

if [ -f /usr/lib64/php5/extensions/cfmod.so ]; then
    rm -f /usr/lib64/php5/extensions/cfmod.so
    rm -f /usr/lib64/php5/extensions/curl.so
    rm -f /usr/lib64/php5/extensions/cfengine-enterprise-api.so
fi

exit 0

%files
%defattr(755,root,root)

# Main program
%dir %prefix
%dir %prefix/bin
%prefix/bin/cf-agent
%prefix/bin/cf-execd
%prefix/bin/cf-key
%prefix/bin/cf-monitord
%prefix/bin/cf-promises
%prefix/bin/cf-runagent
%prefix/bin/cf-serverd
# Nova-only binaries
%prefix/bin/cf-hub
%prefix/bin/cf-consumer
#rsync
%prefix/bin/rsync
# OpenSSL tools
%{prefix}/bin/openssl
%dir %{prefix}/ssl
%{prefix}/ssl/openssl.cnf

%dir %{prefix}/ssl/certs
%dir %{prefix}/ssl/private
%dir %{prefix}/ssl/misc
%{prefix}/ssl/misc/CA.pl
%{prefix}/ssl/misc/CA.sh
%{prefix}/ssl/misc/c_hash
%{prefix}/ssl/misc/c_info
%{prefix}/ssl/misc/c_issuer
%{prefix}/ssl/misc/c_name

%prefix/bin/git
%prefix/bin/gitk
%prefix/bin/git-cvsserver
%prefix/bin/git-receive-pack
%prefix/bin/git-shell
%prefix/bin/git-upload-archive
%prefix/bin/git-upload-pack
%prefix/bin/curl
#postgresql binaries
%{prefix}/bin/clusterdb
%{prefix}/bin/createdb
%{prefix}/bin/createlang
%{prefix}/bin/createuser
%{prefix}/bin/dropdb
%{prefix}/bin/droplang
%{prefix}/bin/dropuser
%{prefix}/bin/pg_basebackup
%{prefix}/bin/pg_config
%{prefix}/bin/pg_dump
%{prefix}/bin/pg_dumpall
%{prefix}/bin/pg_isready
%{prefix}/bin/pg_receivexlog
%{prefix}/bin/pg_restore
%{prefix}/bin/psql
%{prefix}/bin/reindexdb
%{prefix}/bin/vacuumdb
#postgresql server
%{prefix}/bin/initdb
%{prefix}/bin/pg_controldata
%{prefix}/bin/pg_ctl
%{prefix}/bin/pg_resetxlog
%{prefix}/bin/postgres
%{prefix}/bin/postmaster
%{prefix}/bin/pg_test_timing
%{prefix}/bin/pg_standby
%{prefix}/bin/pg_archivecleanup
%{prefix}/bin/oid2name
%{prefix}/bin/pg_upgrade
%{prefix}/bin/pg_xlogdump
%{prefix}/bin/pgbench
%{prefix}/bin/vacuumlo
%{prefix}/bin/pg_test_fsync
#redis server
%{prefix}/bin/redis-cli
%{prefix}/bin/redis-server
%{prefix}/bin/redis-check-aof
%{prefix}/bin/redis-benchmark
%{prefix}/bin/redis-check-dump
# LMDB
%prefix/bin/lmdump
%prefix/bin/lmmgr
%prefix/bin/mdb_copy
%prefix/bin/mdb_stat

# Auxiliary programs
%if "%{version}" >= "3.0"
%prefix/bin/rpmvercmp
%endif

%defattr(644,root,root,755)
%dir %prefix/lib
%prefix/lib/lib*.so*
%prefix/lib/cfengine-enterprise.so
%prefix/lib/cfengine-report-collect.so
# PHP modules
%prefix/lib/php
#libs needed by apache ldapmodules
%prefix/lib/apr-util-1
#libs of postgres
%{prefix}/lib/postgresql/*
#libexec of git
%defattr(755,root,root,755)
%{prefix}/lib/git-core/*


# Initscript, other configuration
%defattr(755,root,root,755)
/etc/init.d/cfengine3
/etc/sysconfig/cfengine3
/etc/profile.d/cfengine.sh

# Documentation
%defattr(644,root,root,755)
%dir %prefix/share
%prefix/share/man
%prefix/share/doc
# Base policy
%prefix/share/NovaBase
# Web interface
%prefix/share/GUI
#postgresql share
%prefix/share/postgresql/*
%prefix/share/db
%{prefix}/share/doc/postgresql/extension/*

#DC deps
%defattr(755,root,root,755)
%prefix/share/locale
%prefix/share/git-core
%prefix/share/git-gui
%prefix/share/gitk
%prefix/share/gitweb

#Solaris upgrade files
%prefix/share/solaris_admin_files

# Private directories
%defattr(755,root,root,755)
%dir %prefix/httpd
%prefix/httpd/bin
%prefix/httpd/cgi-bin
%defattr(644,root,root,755)
%prefix/httpd/conf
%prefix/httpd/error
%prefix/httpd/htdocs
%prefix/httpd/icons
%prefix/httpd/logs
%prefix/httpd/modules
%prefix/httpd/php/etc
%prefix/httpd/php/lib
%prefix/httpd/php/php
%defattr(755,root,root,755)
%prefix/httpd/php/bin

# Software upgrade delivery area
%dir %prefix/master_software_updates

# Design Center
%defattr(755,root,root,755)
%dir %prefix/design-center
%prefix/design-center/bin
%prefix/design-center/lib


%defattr(700,root,root,700)
%dir %prefix/ppkeys
%dir %prefix/outputs
%dir %prefix/inputs
%dir %prefix/modules

%changelog
