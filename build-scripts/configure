#!/bin/sh -x

. `dirname "$0"`/functions
. detect-environment
. compile-options

P=$BUILDPREFIX

ARGS="--prefix=$P --with-workdir=$P --sysconfdir=/etc --with-openssl=$P --with-pcre=$P"

case "$PROJECT" in
  community)
    NOVA=no
    ;;
  nova)
    NOVA=yes
    ;;
  *)
    echo "Unknown project: $PROJECT"
    exit 42;;
esac

case "$PTHREADS_W32" in
  yes)
    ARGS="$ARGS --with-pthreads=$P";;
  no)
    ;;
esac

case "$SQL" in
  yes)
    ARGS="$ARGS --with-postgresql=$P --without-mysql";;
  no)
    ARGS="$ARGS --without-sql";;
esac

case "$LIBACL" in
  yes)
    ARGS="$ARGS --with-libacl=$P";;
  no)
    ARGS="$ARGS --without-libacl";;
esac

case "$OPENLDAP" in
  yes)
    ARGS="$ARGS --with-ldap=$P";;
  no)
    ARGS="$ARGS --without-ldap";;
esac

case "$ARCH-${OS_FAMILY}" in
  x86-mingw)
    ARGS="$ARGS --host=i686-w64-mingw32";;
  x64-mingw)
    ARGS="$ARGS --host=x86_64-w64-mingw32";;
esac

case "$EMBEDDED_DB" in
  lmdb)
    ARGS="$ARGS --with-lmdb=$P";;
  *)
    echo "Unknown embedded DB: $EMBEDDED_DB"
    exit 42;;
esac

case "$LIBVIRT" in
  yes)
    ARGS="$ARGS --with-libvirt=$P";;
  no)
    ARGS="$ARGS --without-libvirt";;
  *)
    echo "Unknown libvirt selection: $LIBVIRT"
    exit 42;;
esac

case "$LIBXML2" in
  yes)
    ARGS="$ARGS --with-libxml2=$P";;
  no)
    ARGS="$ARGS --without-libxml2";;
  *)
    echo "Unknown libxml2 selection: $LIBXML2"
    exit 42;;
esac

case "$ROLE" in
  hub)
    ARGS="$ARGS --with-cfmod --with-enterprise-api --with-postgresql-hub=$P --with-redis=$P";;
  agent)
    ARGS="$ARGS --without-cfmod --without-postgresql-hub --without-redis";;
  *)
    echo "Unknown role selection: $ROLE"
    exit 42;;
esac

case "$OPTIMIZE" in
  yes)
    ;;
  no)
    ARGS="$ARGS --enable-debug";;
  *)
    echo "Unknown optimize selection: $OPTIMIZE"
    exit 42;;
esac

case "$BUILD_TYPE" in
  debug_and_release)
      CFLAGS="$CFLAGS -g -O2 -Wall -DNDEBUG";;
  debug)
      ;;
  code_coverage)
    ARGS="$ARGS --enable-debug"
# lcov is not found in Windows and other platforms
      case "${OS}-${OS_VERSION}" in
        mingw*)
        ;;
        hpux*)
        ;;
        solaris*)
        ;;
        rhel-4.*)
        ;;
        aix*)
	      ;;
        *)
        ARGS="$ARGS --enable-coverage"
        ;;
      esac
      ;;
   full|release|quick)
      ;;
  *)
      echo "Unknown build type: $BUILD_TYPE"
      exit 42;;
esac

( cd $BASEDIR/core && env $OPTS CFLAGS="$CFLAGS" ./configure $ARGS )

if test "x$NOVA" = "xyes"; then
    ( cd $BASEDIR/enterprise && env $OPTS CFLAGS="$CFLAGS" ./configure $ARGS )
    if test "x$ROLE" = "xhub"; then
        ( cd $BASEDIR/nova && env $OPTS CFLAGS="$CFLAGS" ./configure $ARGS )
    fi
fi

( cd $BASEDIR/masterfiles && env $OPTS CFLAGS="$CFLAGS" ./configure $ARGS )
