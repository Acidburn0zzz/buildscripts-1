#!/bin/sh

. `dirname "$0"`/functions
. detect-environment
. compile-options


# We use packaging scripts
PATH=$PATH:$BASEDIR/buildscripts/deps-packaging

# Not all dependencies support building in parallel.
MAKEFLAGS=-j1

set -x

# This should be already set from sourcing "functions" at the top, but
# make sure, because we don't want build-artifacts-cache to have bogus
# packages.
set -e


install_pkg_files()
{
    retry_wrapper  pkg-install-$DEP_PACKAGING  "$@"
}


# Apply necessary changes for alternate /opt/cfengine prefix
if [ "$BUILDPREFIX" = "/opt/cfengine" ]
then
    sed -i "s:var/cfengine:opt/cfengine:"  \
        $BASEDIR/buildscripts/deps-packaging/*/debian/*.install  \
        $BASEDIR/buildscripts/deps-packaging/*/mingw/debian/*.install \
        $BASEDIR/buildscripts/deps-packaging/apache/httpd.conf \
        $BASEDIR/buildscripts/deps-packaging/apache/httpd-ssl.conf
fi

#
# Override for manual testing
#
if [ "x$1" != x ]
then
    DEPS="$@"
fi

for dep in $DEPS
do

    case "$BUILD_TYPE" in
    DEBUG|CODE_COVERAGE)
        optimize=yes
        debugsym=no
        versuffix=+untested
        tests=no;;
    RELEASE)
        optimize=yes
        debugsym=no
        versuffix=+release
        tests=yes;;
    *)
        echo "Unknown build type: $BUILD_TYPE"
        exit 42;;
    esac

    case "$ARCH" in
    x86|x64)
        crossver=+mingw$ARCH
        cross=$ARCH;;
    *)
        crossver=
        cross=native;;
    esac

    revision=$(cat $BASEDIR/buildscripts/deps-packaging/revision)
    version=0+$revision$versuffix$crossver

    if pkg-cache find $dep-$version
    then
        if [ x$PKGCACHE_PRUNE != x ]
        then
            echo "Removing package from cache because PKGCACHE_PRUNE is set"
            pkg-cache prune $dep-$version
        else
            echo "Package found in cache, skipping compilation"
        fi

    fi

    # Keep 10 packages around. Should be more than enough for all the main
    # and private branches.
    pkg-cache autoprune $dep 10

    if pkg-cache find $dep-$version
    then
        :
    else
        $BASEDIR/buildscripts/deps-packaging/pkg-build-${DEP_PACKAGING}  \
            $dep $tests $cross $optimize $debugsym $version
        pkg-cache store $dep-$version $(pkg-find-${DEP_PACKAGING} $BASEDIR/$dep)
    fi

    install_pkg_files  $(pkg-cache list $dep-$version)

done
