# -*- mode:sh -*-

# Should we package libgcc_s.so.1?

case "$OS_FAMILY" in
  solaris)
    LIBGCC=yes;;
  *)
    LIBGCC=no;;
esac

# libsasl needed for solaris

case "$OS_FAMILY" in
  solaris)
    LIBSASL=yes;;
  *)
    LIBSASL=no;;
esac

# Do we need libgnurx-0.dll?

case "$OS_FAMILY" in
  mingw)
    GNURX=yes;;
  *)
    GNURX=no;;
esac

# Do we need to build pthreads-w32?

case "$OS_FAMILY" in
  mingw)
    PTHREADS_W32=yes;;
  *)
    PTHREADS_W32=no;;
esac

# Embedded DB selection

case "$OS_FAMILY" in
  mingw)
    EMBEDDED_DB=qdbm;;
  *)
    EMBEDDED_DB=tokyocabinet;;
esac

export EMBEDDED_DB

# libvirt

case "$PROJECT-$ARCH-${OS_FAMILY}" in
  *-s390*-*)
    LIBVIRT=no;;
  *-*-linux)
    case "${OS}-${OS_VERSION}" in
      debian-3.1)
        LIBVIRT=no;;
      *-*)
        LIBVIRT=yes;;
    esac;;
  *-*-mingw|*-*-aix|*-*-*bsd|*-*-solaris)
    LIBVIRT=no;;
  *)
    LIBVIRT=yes;;
esac

export LIBVIRT

# libmcrypt

case "${OS}-${OS_VERSION}" in
  rhel-[56].*)
    LIBMCRYPT=yes;;
  centos-[6].*)
    LIBMCRYPT=yes;;
  *)
    LIBMCRYPT=no;;
esac  

export LIBMCRYPT

# LDAP

case "$PROJECT" in
  community)
    OPENLDAP=no;;
  *)
    OPENLDAP=yes;
esac

export OPENLDAP

# SQL drivers

SQL=yes

export SQL

# libacl & libattr
case "$OS_FAMILY" in
  solaris)
    LIBACL=no
    LIBATTR=no;;
  mingw)
    LIBACL=no
    LIBATTR=no;;
  *)
    case "$BRANCH" in
      nova-master)
        LIBACL=yes
        LIBATTR=yes;;
      nova-stable)
        LIBACL=yes
        LIBATTR=yes;;
      community-master)
        LIBACL=yes
        LIBATTR=yes;;
      *)
        LIBACL=no
        LIBATTR=no;;
    esac
  ;;
esac

export LIBATTR LIBACL

# libSegFault, only on glibc-based systems

case "$OS_FAMILY" in
  linux)
    LIBSEGFAULT=yes;;
  *)
    LIBSEGFAULT=no;;
esac

export LIBSEGFAULT

# WEB

case "$PROJECT-$ARCH-$OS-${OS_VERSION}" in
  community-*) WEB=no;;
  *-s390*-*-*) WEB=no;;
  *-*-centos-[56].*) WEB=yes;;
  *-*-debian-6.*) WEB=yes;;
  *-*-opensuse-11.*) WEB=yes;;
  *-*-rhel-[56].*) WEB=yes;;
  *-*-sles-11.*) WEB=yes;;
  *-*-ubuntu-8.04) WEB=yes;;
  *-*-ubuntu-10.04) WEB=yes;;
  *-*-ubuntu-12.04) WEB=yes;;
  *) WEB=no;;
esac

export WEB

## PHP modules

case "$WEB" in
  yes)

    # No distributions ship php-mongo driver
    PHP_MONGO=$WEB
    LIBCURL=$WEB
    PHP_CURL=$WEB
    SQLITE=$WEB

    # php-svn for older ones
    case "$OS-${OS_VERSION}" in
      centos-[56].*) PHP_SVN=yes;;
      debian-5.*) PHP_SVN=yes;;
      debian-6.*) PHP_SVN=yes;;
      opensuse-11.*) PHP_SVN=yes;;
      sles-11.*) PHP_SVN=yes;;
      ubuntu-8.04) PHP_SVN=yes;;
      ubuntu-10.04) PHP_SVN=yes;;
      ubuntu-12.04) PHP_SVN=yes;;
      rhel-[56].*) PHP_SVN=yes;;
      *)
        echo "Please figure out whether you need to build php-svn for this distro"
        exit 42;;
    esac
    
    case "$OS-${OS_VERSION}" in
      rhel-[5].*) PHP_JSON=yes;;
      centos-[5].*) PHP_JSON=yes;;
      *) PHP_JSON=no;;
    esac

    case "$OS-${OS_VERSION}" in
      rhel-[56].*) PHP_MCRYPT=yes;;
      centos-[6].*) PHP_MCRYPT=yes;;
      *) PHP_MCRYPT=no;;
    esac

    ;;
  no)
    PHP_MONGO=no
    PHP_SVN=no
    PHP_JSON=no
    PHP_MCRYPT=no
	LIBCURL=no
	PHP_CURL=no
	SQLITE=no
    ;;
esac

export PHP_MONGO PHP_SVN PHP_JSON PHP_MCRYPT LIBCURL PHP_CURL SQLITE

# Tests

case "$OS_FAMILY" in
  mingw)
    TESTS=no;;
  solaris)
    TESTS=no;;
  *)
    TESTS=yes;;
esac

export TESTS

# Optimization

case "$BUILD_TYPE" in
  debug)
    OPTIMIZE=no;;
  release|quick|full)
    OPTIMIZE=yes;;
  *)
    echo "Unknown build type: $BUILD_TYPE"
    exit 42;;
esac

export OPTIMIZE
