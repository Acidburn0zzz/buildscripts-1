# -*- mode:sh -*-

# Detect version of the software

parse_version_string()
{
  VARNAME="$1"
  VERSION_PATH="$2"

  VERSION=$(awk '/^ ?'$VARNAME'=/ {print}' < $BASEDIR/$VERSION_PATH/configure)

  VERSION=${VERSION#*=}

  if [ -z "$VERSION" ]; then
    echo "Unable to detect version (variable $VARNAME). Bailing out" >&2
    exit 42
  fi

  echo $VERSION
}

ci_version()
{
  echo "ci_version"
  if [ -d $BASEDIR/nova ]; then
    VERSION=$(parse_version_string NOVA_VERSION "nova")
    echo "Using NOVA_VERSION: $NOVA_VERSION"
  else
    VERSION=$(parse_version_string VERSION "core")
    echo "Using VERSION: $VERSION"
  fi

  # Insert ~, so pre-releases get sorted before releases

  MAIN_VERSION=$(printf "$VERSION" | perl -ne 'if (/^(\d+\.\d+\.\d+)([a-z][^.]+)?/) { print $1 }')
  SUPP_VERSION=$(printf "$VERSION" | perl -ne 'if (/^(\d+\.\d+\.\d+)([a-z][^.]+)?/) { print $2 }')

  if [ -z "$MAIN_VERSION" ]; then
    echo "Unable to parse version $VERSION. Bailing out."
    exit 42
  fi

  if [ -z "$SUPP_VERSION" ]; then
    VERSION="$MAIN_VERSION"
  else
    VERSION="$MAIN_VERSION~$SUPP_VERSION"
  fi
  echo "VERSION: $VERSION"
}

release_version()
{
  echo "release_version"
  if [ -d $BASEDIR/nova ]; then
    VERSION=$(parse_version_string NOVA_VERSION "nova")
    echo "Using NOVA_VERSION: $NOVA_VERSION"
  else
    VERSION=$(parse_version_string VERSION "core")
    echo "Using VERSION: $VERSION"
  fi
  echo "VERSION: $VERSION"
}

continuous_version()
{
  MONTH=`date +"%m"`
  YEAR=`date +"%g"`
  MY_BUILD_NUMBER=$BUILD_NUMBER
  MY_MAJOR_VERSION=$MAJOR_VERSION
  echo "version is $MY_MAJOR_VERSION.$YEAR.$MONTH-$MY_BUILD_NUMBER"
  VERSION=$MY_MAJOR_VERSION.$YEAR.$MONTH-$MY_BUILD_NUMBER
}

if [ -z "$EXPLICIT_VERSION" ]
then
  case "$BUILD_TYPE" in
    RELEASE)
      release_version
      ;;
    DEBUG)
      ci_version
      ;;
    CODE_COVERAGE)
      ci_version
      VERSION="$VERSION.code_coverage"
      ;;
    *)
      echo "Unknown build type: $BUILD_TYPE"
      exit 42
      ;;
  esac
else
  VERSION=$EXPLICIT_VERSION
fi

