# -*- mode:sh -*-

# Detect version of the software

parse_version_string()
{
  VARNAME="$1"

  VERSION=$(awk '/^ ?'$VARNAME'=/ {print}' < $BASEDIR/core/configure)

  VERSION=${VERSION#*=}

  if [ -z "$VERSION" ]; then
    echo "Unable to detect version (variable $VARNAME). Bailing out" >&2
    exit 42
  fi

  echo $VERSION
}

ci_version()
{
  if [ -d $BASEDIR/nova ]; then
    VERSION=$(parse_version_string NOVA_VERSION)
  else
    VERSION=$(parse_version_string VERSION)
  fi

  # Insert ~, so pre-releases get sorted before releases

  MAIN_VERSION=$(echo -n 3.4.0 | perl -ne 'if (/^(\d+\.\d+\.\d+)([^.]+)?(?:\.([0-9a-f]+))?$/) { print $1 }')
  SUPP_VERSION=$(echo -n 3.4.0 | perl -ne 'if (/^(\d+\.\d+\.\d+)([^.]+)?(?:\.([0-9a-f]+))?$/) { print $2 }')

  if [ -z "$SUPP_VERSION" ]; then
    VERSION="$MAIN_VERSION"
  else
    VERSION="$MAIN_VERSION~$SUPP_VERSION"
  fi
}

release_version()
{
  if [ -d $BASEDIR/nova ]; then
    PROJECT=nova
    VERSION=$(parse_version_string NOVA_VERSION)
  else
    PROJECT=community
    VERSION=$(parse_version_string VERSION)
  fi
}

case "$BUILD_TYPE" in
  quick|full)
    ci_version;;
  debug)
    ci_version
    VERSION="$VERSION.debug";;
  release)
    release_version;;
  *)
    echo "Unknown build type: $BUILD_TYPE"
    exit 1;;
esac
