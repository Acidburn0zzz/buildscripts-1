# -*- mode: sh -*-

#
# Use this script in the following way:
# . `dirname "$0"`/functions
#

#
# Note: Do not use $(), as Solaris /bin/sh will choke on it *before* executing.
#

# Detect a POSIX compliant shell
detect_posix_sh() {
    # Trying to detect if we are running on a POSIX shell
    HAVE_POSIX_SH=0
    unset foo
    (: ${foo%%bar}) 2> /dev/null && true
    T1=$?
    if test "$T1" = 0; then
        # POSIX shell detected
        HAVE_POSIX_SH=1
    fi
}
# We are getting to the weird ones, Solaris shell supports the things
# used before so we will use that as a mark of a Solaris shell
detect_solaris_sh() {
    # Trying to detect Solaris POSIX shell
    HAVE_SOLARIS_SH=0
    if test -x /usr/xpg4/bin/sh; then
        # Solaris POSIX shell detected
        HAVE_SOLARIS_SH=1
    fi
}

#
# Detect and replace non-POSIX shell
#
try_exec() {
  type "$1" > /dev/null 2>&1 && exec "$@"
}

# POSIX compliant shell test
detect_posix_sh
if [ $HAVE_POSIX_SH -ne 1 ]; then
    # POSIX shell test failed. We will try to detect a POSIX shell in your system.
    # If your system does not have a POSIX shell, then this script will abort.
    # In that case please install a POSIX shell and create a test for it.
    detect_solaris_sh
    if [ $HAVE_SOLARIS_SH -eq 1 ]; then
        # "Trying to switch to Solaris POSIX shell"
        try_exec /usr/xpg4/bin/sh -x "$0" "$@"
        echo "Something went wrong when trying to replace the Solaris Shell. Aborting."
        exit 42
    fi
    echo "unknown shell"
fi

#
# Do not set -e before switching to POSIX shell, as it will break the test
# above.
#
set -e

#
# Figure out where scripts are, and amend PATH to ease our life.
#

if [ -z "$AUTOBUILD_PATH" ]; then
  case "$0" in
    /*) SCRIPTDIR=`dirname "$0"`;;
    *) SCRIPTDIR=`pwd`/`dirname "$0"`;;
  esac

  AUTOBUILD_PATH="$(dirname "$SCRIPTDIR")"
fi
BASEDIR="$(dirname "$AUTOBUILD_PATH")"


# Export to which directory the packages will be installed, using the define buildprefix in environment or /var/cfengine as default. 
export BUILDPREFIX=${BUILDPREFIX:-/var/cfengine}
export PATH="$PATH:$AUTOBUILD_PATH/build-scripts:$BUILDPREFIX/httpd/php/bin:/usr/local/bin:/usr/sbin:/usr/sfw/bin:/usr/bin:/usr/local/sbin:/usr/contrib/bin"
export BASEDIR

#
# Packages handling
#

install_rpms()
{
  execute-wrapper.sh sudo rpm -Uvh "$@"
}

uninstall_rpms()
{
  PKGS=`rpm -qa --queryformat "%{Name}-%{Version}\n" | grep '^'$1 || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo rpm -e $PKGS
  fi
}

install_debs()
{
  execute-wrapper.sh sudo dpkg -i "$@"
}

uninstall_debs()
{
  PKGS=`dpkg -l | tail -n+6 | awk '{print $2}' | grep '^'$1'$' || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo dpkg --purge $PKGS
  fi
}

install_solaris_pkgs()
{
  echo "OWHOO!"
  exit 1
}

uninstall_solaris_pkgs()
{
  PKGS=`pkginfo | awk '{print $2}' | grep '^'$1'$' || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo /usr/sbin/pkgrm -n $PKGS
  fi
}

install_hpux_pkgs()
{
  echo "$@"
}

uninstall_hpux_pkgs()
{
  PKGS=`swlist | awk '{print $1}' | grep '^'$1'$' || true`

  for p in $PKGS
  do
    sudo /usr/sbin/swremove $p
  done
}

#
# Dealing with packages
#

uninstall_cfbuild()
{
  case "$DEP_PACKAGING" in
    rpm) uninstall_rpms 'cfbuild-.*';;
    deb) uninstall_debs 'cfbuild-.*';;
    solaris) uninstall_solaris_pkgs 'cfbuild-.*';;
    freebsd) uninstall_freebsd_pkgs 'cfbuild-.*';;
    hpux) uninstall_hpux_pkgs 'cfbuild-.*';;
    *)
      echo "Unknown packaging system: $DEP_PACKAGING"
      exit 1;;
  esac
}

uninstall_cfbuild_devel()
{
  case "$DEP_PACKAGING" in
    rpm) uninstall_rpms 'cfbuild-.*-devel';;
    deb) uninstall_debs 'cfbuild-.*-devel';;
    solaris) uninstall_solaris_pkgs 'cfbuild-.*-devel';;
    freebsd) uninstall_freebsd_pkgs 'cfbuild-.*-devel';;
    hpux) uninstall_hpux_pkgs 'cfbuild-.*-devel';;
    *)
      echo "Unknown packaging system: $DEP_PACKAGING"
      exit 42;;
  esac
}

install_freebsd_pkgs()
{
	execute-wrapper.sh sudo pkg_add "$@"
}

uninstall_freebsd_pkgs()
{
	PKGS=`pkg_info | awk '{print $1}' | grep '^'$1 || true`
	if [ -n "$PKGS" ]; then
	  execute-wrapper.sh sudo pkg_delete $PKGS
	fi
}

run() {
  NAME="$1"
  shift
  echo "---> $NAME"
  if ! "$@" >> "build-remote.log" 2>&1; then
    echo "Failed. See the build-remote.log. Last lines are:"
    tail build-remote.log
    exit 1
  fi
}

local_script_general() {
  SCRIPT="$1"
  "$AUTOBUILD_PATH/build-scripts/$SCRIPT" "$HOST"
}

local_script() {
  SCRIPT="$1"
  run "$SCRIPT" "$AUTOBUILD_PATH/build-scripts/$SCRIPT" "$HOST"
}

remote_script_general() {
  SCRIPT="$1"
  LOGIN_COMMAND="$2"
  SCRIPT_BASEDIR="$3"
  ENVVARS="PROJECT=$PROJECT"
  if [ -n "$CROSS_TARGET" ]; then
    ENVVARS="$ENVVARS CROSS_TARGET=$CROSS_TARGET"
  fi
  if [ -n "$WIX_MACHINE" ]; then
    ENVVARS="$ENVVARS WIX_MACHINE=$WIX_MACHINE"
  fi
  if [ -n "$BUILD_TYPE" ]; then
    ENVVARS="$ENVVARS BUILD_TYPE=$BUILD_TYPE"
  fi
  if [ -n "$BUILD_NUMBER" ]; then
    ENVVARS="$ENVVARS BUILD_NUMBER=$BUILD_NUMBER"
  fi
  if [ -n "$PREFIX" ]; then
    ENVVARS="$ENVVARS BUILDPREFIX=$PREFIX"
  fi
  if [ -n "$CC" ]; then
    ENVVARS="$ENVVARS CC=$CC"
  fi
  if [ -n "$CPPFLAGS" ]; then
    ENVVARS="$ENVVARS CPPFLAGS='$CPPFLAGS'"
  fi
  if [ -n "$CFLAGS" ]; then
    ENVVARS="$ENVVARS CFLAGS='$CFLAGS'"
  fi
  if [ -n "$LDFLAGS" ]; then
    ENVVARS="$ENVVARS LDFLAGS='$LDFLAGS'"
  fi

  ENVVARS="$ENVVARS BRANCH=$REPOSITORY"
  ENVVARS="$ENVVARS EXPLICIT_ROLE=$EXPLICIT_ROLE"
  ENVVARS="$ENVVARS EXPLICIT_VERSION=$EXPLICIT_VERSION"
  ENVVARS="$ENVVARS TEST_MACHINE=$TEST_MACHINE"
  ENVVARS="$ENVVARS TEST_SHELL=$TEST_SHELL"

  ( eval $LOGIN_COMMAND env $ENVVARS "$SCRIPT_BASEDIR"/buildscripts/build-scripts/"$SCRIPT" )
}

remote_script() {
  SCRIPT="$1"
  run "$SCRIPT" remote_script_general "$SCRIPT" "ssh -o BatchMode=yes $HOST" build
}

projects_to_test() {
  if test "x$PROJECT" = "xcommunity"; then
    echo "core masterfiles"
  else
    if test "x$ROLE" = "xhub"; then
      echo "core enterprise nova masterfiles"
    else
      echo "core enterprise masterfiles"
    fi
  fi
}

generate_chroot_transfer_script()
{
  # These rules are processed in a "first that matches" fashion.

  ############# Cross platform #############
  cat <<EOF
- */proc
+ /bin
+ /etc
- /lib/modules
+ /lib
- /lib64/modules
+ /lib64
+ /sbin
- /usr/src
- /usr/local/src
+ /usr
- /var/cfengine
- /var/tmp
+ /var
EOF

  ########### Platform specific ############
  case "$OS_FAMILY" in
    aix)
      cat <<EOF
+ /dev
+ /TT_DB
+ /audit
+ /lpp
+ /lppdir
+ /opt/freeware
- /opt/*
+ /opt
EOF
      ;;
    solaris)
      cat <<EOF
- /.SUNWnative/usr/jdk
- /.SUNWnative/usr/openwin
- /.SUNWnative/usr/lib/AdobeReader
+ /.SUNWnative
+ /opt/csw
- /opt/*
+ /opt
+ /system/volatile
- /system/*
+ /system
- /var/run/*
EOF
      ;;
    linux|hpux)
      cat <<EOF
+ /dev
EOF
      ;;
  esac

  # Exclude everything else.
  echo "- /*"
}

# One argument: Where to mount it.
mount_procfs()
{
  case "$OS" in
    aix)
      sudo mount -v namefs /proc "$1"
      ;;
    solaris)
      sudo mount -F proc proc "$1"
      ;;
    hpux)
      # No proc on HPUX.
      true
      ;;
    *)
      sudo mount -t proc proc "$1"
      ;;
  esac
}
