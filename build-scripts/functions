# -*- mode: sh -*-

#
# Use this script in the following way:
# . `dirname "$0"`/functions
#

#
# Note: Do not use $(), as Solaris /bin/sh will choke on it *before* executing.
#

# Detect a POSIX compliant shell
detect_posix_sh() {
    echo "Trying to detect if we are running on a POSIX shell"
    HAVE_POSIX_SH=0
    unset foo
    (: ${foo%%bar}) 2> /dev/null && echo 0
    T1=$?
    if test "$T1" = 0; then
        echo "POSIX shell detected"
        HAVE_POSIX_SH=1
    fi
}
# We are getting to the weird ones, Solaris shell supports the things
# used before so we will use that as a mark of a Solaris shell
detect_solaris_sh() {
    echo "Trying to detect Solaris POSIX shell"
    HAVE_SOLARIS_SH=0
    if test -x /usr/xpg4/bin/sh; then
        echo "Solaris POSIX shell detected"
        HAVE_SOLARIS_SH=1
    fi
}

#
# Detect and replace non-POSIX shell
#
try_exec() {
  type "$1" > /dev/null 2>&1 && exec "$@"
}

echo "POSIX compliant shell test"
detect_posix_sh
if [ $HAVE_POSIX_SH -eq 1 ]; then
    echo "Script will continue"
else
    echo "POSIX shell test failed. We will try to detect a POSIX shell in your system."
    echo "If your system does not have a POSIX shell, then this script will abort."
    echo "In that case please install a POSIX shell and create a test for it." 
    detect_solaris_sh
    if [ $HAVE_SOLARIS_SH -eq 1 ]; then
        echo "Trying to switch to Solaris POSIX shell"
        try_exec /usr/xpg4/bin/sh "$0" "$@"
        echo "Something went wrong when trying to replace the Solaris Shell. Aborting."
        exit 42
    fi
    echo "unknown shell"
fi

#
# Do not set -e before switching to POSIX shell, as it will break the test
# above.
#
set -e

#
# Figure out where scripts are, and amend PATH to ease our life.
#

case "$0" in
  /*) SCRIPTDIR=`dirname "$0"`;;
  *) SCRIPTDIR=`pwd`/`dirname "$0"`;;
esac

if [ -n "$TOPDIR" ]; then
  BASEDIR=`dirname "$SCRIPTDIR"`
  SCRIPTSDIR="$SCRIPTDIR/build-scripts"
else
  BASEDIR=`dirname "$SCRIPTDIR"`
  BASEDIR=`dirname "$BASEDIR"`
  SCRIPTSDIR="$SCRIPTDIR"
fi


# Export to which directory the packages will be installed, using the define buildprefix in environment or /var/cfengine as default. 
export BUILDPREFIX=${BUILDPREFIX:-/var/cfengine}
export PATH="$PATH:$SCRIPTSDIR:$BUILDPREFIX/httpd/php/bin:/usr/local/bin:/usr/sbin:/usr/sfw/bin:/usr/bin:/usr/local/sbin"
export BASEDIR

#
# Packages handling
#

install_rpms()
{
  execute-wrapper.sh sudo rpm -Uvh "$@"
}

uninstall_rpms()
{
  PKGS=`rpm -qa --queryformat "%{Name}\n" | grep '^'$1'$' || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo rpm -e $PKGS
  fi
}

install_debs()
{
  execute-wrapper.sh sudo dpkg -i "$@"
}

uninstall_debs()
{
  PKGS=`dpkg -l | tail -n+6 | awk '{print $2}' | grep '^'$1'$' || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo dpkg --purge $PKGS
  fi
}

install_solaris_pkgs()
{
  echo "OWHOO!"
  exit 1
}

uninstall_solaris_pkgs()
{
  PKGS=`pkginfo | awk '{print $2}' | grep '^'$1'$' || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo /usr/sbin/pkgrm -n $PKGS
  fi
}

install_hpux_pkgs()
{
  echo "$@"
}

uninstall_hpux_pkgs()
{
  PKGS=`swlist | awk '{print $1}' | grep '^'$1'$' || true`

  for p in $PKGS
  do
    sudo /usr/sbin/swremove $p
  done
}

#
# Dealing with packages
#

uninstall_cfbuild()
{
  case "$DEP_PACKAGING" in
    rpm) uninstall_rpms 'cfbuild-.*';;
    deb) uninstall_debs 'cfbuild-.*';;
    solaris) uninstall_solaris_pkgs 'cfbuild-.*';;
    freebsd) uninstall_freebsd_pkgs 'cfbuild-.*';;
    hpux) uninstall_hpux_pkgs 'cfbuild-.*';;
    *)
      echo "Unknown packaging system: $DEP_PACKAGING"
      exit 1;;
  esac
}

uninstall_cfbuild_devel()
{
  case "$DEP_PACKAGING" in
    rpm) uninstall_rpms 'cfbuild-.*-devel';;
    deb) uninstall_debs 'cfbuild-.*-devel';;
    solaris) uninstall_solaris_pkgs 'cfbuild-.*-devel';;
    freebsd) uninstall_freebsd_pkgs 'cfbuild-.*-devel';;
    hpux) uninstall_hpux_pkgs 'cfbuild-.*-devel';;
    *)
      echo "Unknown packaging system: $DEP_PACKAGING"
      exit 42;;
  esac
}

install_freebsd_pkgs()
{
	execute-wrapper.sh sudo pkg_add "$@"
}

uninstall_freebsd_pkgs()
{
	PKGS=`pkg_info | awk '{print $1}' | grep '^'$1 || true`
	if [ -n "$PKGS" ]; then
	  execute-wrapper.sh sudo pkg_delete $PKGS
	fi
}
