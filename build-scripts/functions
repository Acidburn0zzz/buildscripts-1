# -*- mode: sh -*-

#
# Use this script in the following way:
# . `dirname "$0"`/functions
#

#
# NOTE: Do not use $(), as Solaris /bin/sh will choke on it *before* executing.
#

#
# Detect and replace non-POSIX shell
#
try_exec() {
    type "$1" > /dev/null 2>&1 && exec "$@"
}

broken_posix_shell()
{
    unset foo
    local foo=1
    test "$foo" != "1"
}

if broken_posix_shell >/dev/null 2>&1; then
    try_exec /usr/xpg4/bin/sh "$0" "$@"
    echo "No compatible shell script interpreter found."
    echo "Please find a POSIX shell for your system."
    exit 42
fi

#
# Do not set -e before switching to POSIX shell, as it will break the test
# above.
#
set -e


# Preparatory step: export all variables needed
export_variables ()
{
    #
    # BASEDIR: where all our repos have been checked out
    #
    if [ -z "$AUTOBUILD_PATH" ]
    then
        case "$0" in
            /*) SCRIPTDIR=`dirname "$0"`;;
            *)  SCRIPTDIR=`pwd`/`dirname "$0"`;;
        esac

        AUTOBUILD_PATH=`dirname "$SCRIPTDIR"`
    fi
    BASEDIR=`dirname "$AUTOBUILD_PATH"`
    export BASEDIR


    # BUILDPREFIX: which directory the packages will be installed to.
    BUILDPREFIX=${BUILDPREFIX:-/var/cfengine}
    export BUILDPREFIX


    # Set PATH according to the needs of each platform and build-type
    # TODO: remove the generic PATH setting completely,
    #       all should be under conditionals
    case x`uname -s` in
        xSunOS)
            # Currently we rely strongly on OpenCSW packages.
            PATH="/opt/csw/bin:/usr/xpg4/bin:$PATH"  ;;

        xHP-UX)  PATH="$PATH:/usr/contrib/bin"  ;;
        *) ;;
    esac
    # TODO remove */sbin from generic PATH
    PATH="$PATH:/usr/local/bin:/usr/sbin:/usr/local/sbin"
    PATH="$PATH:$AUTOBUILD_PATH/build-scripts:$BUILDPREFIX/httpd/php/bin"
    export PATH


    # Autotools config.status (as invoked by ./configure) needs CONFIG_SHELL
    # to point to a proper bourne shell in some platforms.
    # https://www.gnu.org/software/libtool/manual/html_node/Configure-notes.html
    # https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/config_002estatus-Invocation.html
    case x`uname -s` in
        xSunOS)  CONFIG_SHELL=/usr/xpg4/bin/sh  ;;
        xAIX)    CONFIG_SHELL=/usr/bin/bash     ;;
    esac
    export CONFIG_SHELL


    # Final destination of generated buildscripts output
    OUTDIR="$BASEDIR/output/${OS}-${OS_VERSION}-${ARCH}"
    export OUTDIR
}

export_variables


# For utilities in paths that we don't want in PATH.
# Not exported, used exclusively by func_whereis()
# TODO make it platform-dependent, add other platforms besides Solaris.
SECONDARY_PATHS="/sbin /usr/sbin  /usr/sfw/bin"  #"/opt/csw/gnu /usr/ccs/bin"



#
# Packages handling
#

install_rpms()
{
  execute-wrapper.sh sudo rpm -Uvh "$@"
}

uninstall_rpms()
{
  PKGS=`rpm -qa --queryformat "%{Name}-%{Version}\n" | grep '^'$1 || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo rpm -e $PKGS
  fi
}

install_debs()
{
  execute-wrapper.sh sudo dpkg -i "$@"
}

uninstall_debs()
{
  PKGS=`dpkg -l | tail -n+6 | awk '{print $2}' | grep '^'$1'$' || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo dpkg --purge $PKGS
  fi
}

install_solaris_pkgs()
{
  echo "OWHOO!"
  exit 1
}

uninstall_solaris_pkgs()
{
  PKGS=`pkginfo | awk '{print $2}' | grep '^'$1'$' || true`
  if [ -n "$PKGS" ]; then
    execute-wrapper.sh sudo /usr/sbin/pkgrm -n $PKGS
  fi
}

install_hpux_pkgs()
{
  echo "$@"
}

uninstall_hpux_pkgs()
{
  PKGS=`swlist | awk '{print $1}' | grep '^'$1'$' || true`

  for p in $PKGS
  do
    sudo /usr/sbin/swremove $p
  done
}

install_freebsd_pkgs()
{
	execute-wrapper.sh sudo pkg_add "$@"
}

uninstall_freebsd_pkgs()
{
	PKGS=`pkg_info | awk '{print $1}' | grep '^'$1 || true`
	if [ -n "$PKGS" ]; then
	  execute-wrapper.sh sudo pkg_delete $PKGS
	fi
}

#
# Dealing with packages
#

uninstall_cfbuild()
{
  case "$DEP_PACKAGING" in
    rpm) uninstall_rpms 'cfbuild-.*';;
    deb) uninstall_debs 'cfbuild-.*';;
    solaris) uninstall_solaris_pkgs 'cfbuild-.*';;
    freebsd) uninstall_freebsd_pkgs 'cfbuild-.*';;
    hpux) uninstall_hpux_pkgs 'cfbuild-.*';;
    *)
      echo "Unknown packaging system: $DEP_PACKAGING"
      exit 1;;
  esac
}
uninstall_cfbuild_devel()
{
  case "$DEP_PACKAGING" in
    rpm) uninstall_rpms 'cfbuild-.*-devel';;
    deb) uninstall_debs 'cfbuild-.*-devel';;
    solaris) uninstall_solaris_pkgs 'cfbuild-.*-devel';;
    freebsd) uninstall_freebsd_pkgs 'cfbuild-.*-devel';;
    hpux) uninstall_hpux_pkgs 'cfbuild-.*-devel';;
    *)
      echo "Unknown packaging system: $DEP_PACKAGING"
      exit 42;;
  esac
}

install_pkg_file()
{
    case "$DEP_PACKAGING" in
        rpm)     sudo rpm  -i -v $1 ;;
        deb)     sudo dpkg -i    $1 ;;
        *)
            echo "ERROR install_pkg_file not implemented on $DEP_PACKAGING"
            exit 1
    esac
}
uninstall_pkg()
{
    case "$DEP_PACKAGING" in
        rpm) sudo rpm  -e -v $1 ;;
        deb) sudo dpkg -P    $1 ;;
        *)
            echo "ERROR uninstall_pkg not implemented for $DEP_PACKAGING"
            exit 1
    esac
}
query_pkg()
{
    case "$DEP_PACKAGING" in
        rpm) rpm  -q --quiet $1 ;;
        deb) dpkg -s         $1 2>&1    |    grep '^Status: .*ok installed' >/dev/null 2>&1 ;;
        *)
            echo "ERROR query_pkg not implemented for $DEP_PACKAGING"
            exit 1
    esac
}



run() {
  NAME="$1"
  shift
  echo "---> $NAME"
  if ! "$@" >> "build-remote.log" 2>&1; then
    echo "Failed. See the build-remote.log. Last lines are:"
    tail build-remote.log
    exit 1
  fi
}

local_script_general() {
  SCRIPT="$1"
  "$BASEDIR/buildscripts/build-scripts/$SCRIPT" "$HOST"
}

local_script() {
  SCRIPT="$1"
  run "$SCRIPT" "$BASEDIR/buildscripts/build-scripts/$SCRIPT" "$HOST"
}

remote_script_general() {
  SCRIPT="$1"
  LOGIN_COMMAND="$2"
  SCRIPT_BASEDIR="$3"
  ENVVARS="PROJECT=$PROJECT"
  if [ -n "$CROSS_TARGET" ]; then
    ENVVARS="$ENVVARS CROSS_TARGET=$CROSS_TARGET"
  fi
  if [ -n "$WIX_MACHINE" ]; then
    ENVVARS="$ENVVARS WIX_MACHINE=$WIX_MACHINE"
  fi
  if [ -n "$BUILD_TYPE" ]; then
    ENVVARS="$ENVVARS BUILD_TYPE=$BUILD_TYPE"
  fi
  if [ -n "$BUILD_NUMBER" ]; then
    ENVVARS="$ENVVARS BUILD_NUMBER=$BUILD_NUMBER"
  fi
  if [ -n "$PREFIX" ]; then
    ENVVARS="$ENVVARS BUILDPREFIX=$PREFIX"
  fi
  if [ -n "$CC" ]; then
    ENVVARS="$ENVVARS CC=$CC"
  fi
  if [ -n "$CPPFLAGS" ]; then
    ENVVARS="$ENVVARS CPPFLAGS='$CPPFLAGS'"
  fi
  if [ -n "$CFLAGS" ]; then
    ENVVARS="$ENVVARS CFLAGS='$CFLAGS'"
  fi
  if [ -n "$LDFLAGS" ]; then
    ENVVARS="$ENVVARS LDFLAGS='$LDFLAGS'"
  fi

  ENVVARS="$ENVVARS BRANCH=$REPOSITORY"
  ENVVARS="$ENVVARS EXPLICIT_ROLE=$EXPLICIT_ROLE"
  ENVVARS="$ENVVARS EXPLICIT_VERSION=$EXPLICIT_VERSION"
  ENVVARS="$ENVVARS TEST_MACHINE=$TEST_MACHINE"
  ENVVARS="$ENVVARS TEST_SHELL=$TEST_SHELL"

  ( eval $LOGIN_COMMAND env $ENVVARS "$SCRIPT_BASEDIR"/buildscripts/build-scripts/"$SCRIPT" )
}

remote_script() {
  SCRIPT="$1"
  run "$SCRIPT" remote_script_general "$SCRIPT" "ssh -o BatchMode=yes $HOST" build
}

projects_to_test() {
  if test "x$PROJECT" = "xcommunity"; then
    echo "core masterfiles"
  else
    if test "x$ROLE" = "xhub"; then
      echo "core enterprise nova masterfiles"
    else
      echo "core enterprise masterfiles"
    fi
  fi
}

generate_chroot_transfer_script()
{
  # These rules are processed in a "first that matches" fashion.

  ############# Cross platform #############
  cat <<EOF
- */proc
+ /bin
+ /etc
- /lib/modules
+ /lib
- /lib64/modules
+ /lib64
+ /sbin
- /usr/src
- /usr/local/src
+ /usr
- /var/cfengine
- /var/tmp
+ /var
EOF

  ########### Platform specific ############
  case "$OS_FAMILY" in
    aix)
      cat <<EOF
+ /dev
+ /TT_DB
+ /audit
+ /lpp
+ /lppdir
+ /opt/freeware
- /opt/*
+ /opt
EOF
      ;;
    solaris)
      cat <<EOF
- /.SUNWnative/usr/jdk
- /.SUNWnative/usr/openwin
- /.SUNWnative/usr/lib/AdobeReader
+ /.SUNWnative
+ /opt/csw
- /opt/*
+ /opt
+ /system/volatile
- /system/*
+ /system
- /var/run/*
EOF
      ;;
    linux|hpux)
      cat <<EOF
+ /dev
+ /run/lock
- /run/*
+ /run
- /var/lib/lxcfs
EOF
      ;;
  esac

  # Exclude everything else.
  echo "- /*"
}

# One argument: Where to mount it.
mount_procfs()
{
  case "$OS" in
    aix)
      sudo mount -v namefs /proc "$1"
      ;;
    solaris)
      sudo mount -F proc proc "$1"
      ;;
    hpux)
      # No proc on HPUX.
      true
      ;;
    *)
      sudo mount -t proc proc "$1"
      ;;
  esac
}


#
# Generic utility and portability functions
#


# Exit with an error. If error code is not specified, just "exit 1".
# Examples:
#     fatal "install failed" 42
#     fatal "exiting with default error code"
fatal()
{
    echo "FATAL ERROR: $1" >&2
    exit ${2-1}
}

# Check that $1 command exists in PATH, and print its full path, else
# return error.  If it has many arguments, continue to
# check for $2 command, etc, before giving up.
func_which ()
{
    while [ x"$1" != x ]
    do
        if command -v "$1"  2>/dev/null
        then
            return 0
        fi
        shift
    done
    return 1
}

# Same as func_which, but search for $1 command in all possible paths,
# not only PATH. If not found, search for $2, etc.
func_whereis ()
{
    while [ x"$1" != x ]
    do
        # First, search in PATH
        if command -v "$1"  2>/dev/null
        then
            return 0
        # Second, search in SECONDARY_PATHS
        else
            for p in $SECONDARY_PATHS
            do
                if command -v "$p/$1"  2>/dev/null
                then
                    return 0
                fi
            done
        fi

        # Command $1 not found, search for next argument
        shift
    done
    return 1
}

# Only works as mktemp -d /path/to/tmpdir.XXXX
func_mktemp ()
{
    # Only works as mktemp -d
    [ x$1 != x-d ] && fatal "func_mktemp: error, first argument must be -d"
    [ x$2  = x ]   && fatal "func_mktemp: requires two arguments"

    # $RANDOM does not exist on Solaris 9 /bin/sh, use $$ as fallback
    my_tmpdir=`echo $2 | sed 's/XX*/'${RANDOM-$$}/`

    save_mktemp_umask=`umask`
    umask 0077
    # Set -e will cause this to fail if it already exists
    mkdir "$my_tmpdir"
    umask $save_mktemp_umask

    [ -d "$my_tmpdir" ]      \
        && echo "$my_tmpdir" \
        || fatal "func_mktemp: failed creating temporary directory $my_tmpdir"
}

# mktempdir TEMPLATE
# Example: mktempdir /tmp/dir.XXXXXX
mktempdir ()
{
    [ x$1 = x ] && fatal "mktempdir: TEMPLATE directory argument missing"

    # HP-UX has its own non-POSIX mktemp, so override it.
    # If not on HP-UX, search PATH for the 'mktemp' or 'gmktemp' command.

    [ x`uname -s` = xHP-UX ]              \
        && my_mktemp=func_mktemp          \
        || my_mktemp=`func_which mktemp gmktemp`  \
        || my_mktemp=func_mktemp

    $my_mktemp -d $1
}

# Print the md5sum of $1 or stdin. See:
# http://www-01.ibm.com/support/docview.wss?uid=swg21496703
func_md5 ()
{
    if func_which md5sum >/dev/null
    then
        md5sum "$@" | cut -d ' ' -f 1
    else
        case x`uname -s` in
            xSunOS)  digest -a md5 "$@"  ;;
            *)      fatal "Can't find command for computing MD5"  ;;
        esac
    fi
}

# Decompresses $1 or stdin to stdout
func_decompress ()
{
    case "$1" in
        *.gz|*.tgz)  gzip  -dc "$@" ;;
        *.bz2)       bzip2 -dc "$@" ;;

        *) fatal "Unknown compression for file: $@" ;;
    esac
}
