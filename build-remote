#!/bin/sh

set -e

usage() {
  echo
  echo "Usage: build-remote [--wix-machine=<user@host>]"
  echo "                    [--cross-target=<target>]"
  echo "                    [--project=<project>]"
  echo "                    [--branch=<branch>]"
  echo "                    [--source=<url>]"
  echo "                    [--full|--release|--debug|--docs]"
  echo "                    <user@host>"
  echo
  echo "Project defaults to 'nova'"
  echo "Branch defaults to 'master'"
  echo "Build type defaults to quick. You may request a full build using --full"
  echo "Source defaults to git@github.com:cfengine/"
  echo
  echo "WiX machine and cross-compilation are not used by default"
  echo
}

opts() {
  OPTS=`getopt -o p:b:w:c:h --long project:,branch:,wix-machine:,cross-target:,source:,full,release,debug,docs,help -n build-remote -- "$@"`

  eval set -- "$OPTS"

  if [ $? != 0 ]; then
    usage
    exit 1
  fi

  DOCS=no
  PROJECT=nova
  BRANCH=master
  BUILD_TYPE=quick
  SOURCE=git@github.com:cfengine
  BUILD_NUMBER=666

  while true; do
    case "$1" in
      -p|--project)
        PROJECT="$2"
        shift 2;;
      -b|--branch)
        BRANCH="$2"
        shift 2;;
      -w|--wix-machine)
        WIX_MACHINE="$2"
        shift 2;;
      -c|--cross-target)
        CROSS_TARGET="$2"
        shift 2;;
      --full)
        BUILD_TYPE=full
        shift;;
      --release)
        BUILD_TYPE=release
        shift;;
      --debug)
        BUILD_TYPE=debug
        shift;;
      --docs)
        DOCS=yes
        shift;;
      --source)
        SOURCE="$2"
        shift 2;;
      -h|--help)
        usage
        exit 0;;
      --)
        shift
        break;;
      *)
        echo "Internal error!"
        exit 1;;
    esac
  done

  if [ $# -ne 1 ]; then
    usage
    exit 1
  fi
  
  REPOSITORY=$PROJECT-$BRANCH
  HOST=$1

  export PROJECT BRANCH WIX_MACHINE CROSS_TARGET HOST BUILD_TYPE BUILD_NUMBER DOCS

  export SCHEDULER=$PROJECT-$BRANCH-localbuild
}

prepare_workdir() {
  mkdir -p "workdir-$PROJECT-$BRANCH-$HOST"
  rm -rf "workdir-$PROJECT-$BRANCH-$HOST"/*
  cd "workdir-$PROJECT-$BRANCH-$HOST"
}

checkout() {
  mkdir -p build
  rsync -avr --exclude='workdir-*' ../ build/autobuild
  (cd build/autobuild && git add -A || :; git commit -a -m "Commit for build" || :)

  case "$PROJECT-$BRANCH" in
    community-master)
      git clone $SOURCE/core build/core
      ;;
    community-3.3.x)
      git clone $SOURCE/core build/core
      (cd build/core && git checkout -b 3.3.x remotes/origin/3.3.x || git checkout 3.3.x) || false
      ;;
    community-3.3.*)
      VERSION=$BRANCH
      git clone $SOURCE/core build/core
      (cd build/core && git checkout $VERSION) || false
      ;;
    nova-2.2.x)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout 3.3.x) || false
      ;;
    nova-2.2.9)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout 3.3.19) || false
      ;;
    nova-2.2.2)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout 3.3.6) || false
      ;;
    nova-2.2.6i)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout 3.3.15i) || false
      ;;
    nova-2.2.6f)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout 3.3.15f) || false
      ;;
    nova-2.2.7)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout -b 3.3.x remotes/origin/3.3.x || git checkout 3.3.x) || false
      ;;
    nova-master)
      git clone $SOURCE/core build/core
      git clone $SOURCE/nova build/nova
      ;;
    nova-stable)
      git clone $SOURCE/core build/core
      (cd build/core && git checkout stable) || false
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout stable) || false
      git clone $SOURCE/mission-portal build/mission-portal
      (cd build/mission-portal && git checkout stable) || false
      ;;
    *)
      echo "WAT?"
      exit 42;;
  esac
}

run() {
  NAME="$1"
  shift
  echo "---> $NAME"
  if ! "$@" > "$NAME.log" 2>&1; then
    echo "Failed. See the $NAME.log. Last lines are:"
    tail $NAME.log
    exit 1
  fi
}

local_script() {
  SCRIPT="$1"
  run "$SCRIPT" "build/autobuild/build-scripts/$SCRIPT" "$HOST"
}

remote_script() {
  SCRIPT="$1"
  ENVVARS="PROJECT=$PROJECT"
  if [ -n "$CROSS_TARGET" ]; then
    ENVVARS="$ENVVARS CROSS_TARGET=$CROSS_TARGET"
  fi
  if [ -n "$WIX_MACHINE" ]; then
    ENVVARS="$ENVVARS WIX_MACHINE=$WIX_MACHINE"
  fi
  if [ -n "$BUILD_TYPE" ]; then
    ENVVARS="$ENVVARS BUILD_TYPE=$BUILD_TYPE"
  fi
  if [ -n "$BUILD_NUMBER" ]; then
    ENVVARS="$ENVVARS BUILD_NUMBER=$BUILD_NUMBER"
  fi

  ENVVARS="$ENVVARS BRANCH=$REPOSITORY"

  run "$SCRIPT" ssh -o BatchMode=yes "$HOST" env $ENVVARS build/autobuild/build-scripts/"$SCRIPT"
}

build_docs() {
  remote_script configure-docs
  remote_script compile
  remote_script upload-docs
}

build() {
  remote_script configure
  remote_script compile
  remote_script test
  remote_script package
  remote_script prepare-results

  local_script transfer-results
  local_script install-results
  local_script clean-results
}

common_build() {

  checkout
  local_script autogen
  local_script transfer-to-buildmachine
  remote_script clean-buildmachine
  remote_script install-dependencies

  case "$DOCS" in
    yes)
      build_docs;;
    no)
      build;;
  esac
}

opts "$@"
prepare_workdir
common_build
