#!/bin/sh

# POSIX shell test.
try_exec() {
  type "$1" > /dev/null 2>&1 && exec "$@"
}

unset foo
(: ${foo%%bar}) 2> /dev/null
T1="$?"

if test "$T1" != 0; then
  try_exec /usr/xpg4/bin/sh "$0" "$@"
  echo "No compatible shell script interpreter found."
  echo "Please find a POSIX shell for your system."
  exit 42
fi

#
# Do not set -e before switching to POSIX shell, as it will break the test
# above.
#
set -e

# Check for Jenkins node label and use that as index.
if [ -n "$NODE_LABELS" ]
then
  # There can be multiple labels, pick the first one.
  # The last one is usually the node name.
  label=${NODE_LABELS%% *}
else
  label=NO_LABEL
fi
CACHEDIR=$HOME/.cache/cfengine-buildscripts-pkgs/$label

usage()
{
  exec >&2
  echo "$0 find <pkg>-<version>-<release>"
  echo "  looks up package in cache"
  echo
  echo "$0 store <pkg>-<version>-<release> <pkgfile> [<pkgfile> ...]"
  echo "  stores new package in cache. refuses to do that if package already exists"
  echo
  echo "$0 list <pkg>-<version>-<release>"
  echo "  lists cached package files"
  echo
  echo "$0 prune <pkg>-<version>-<release>"
  echo "  removes cached package files"
  echo
  echo "$0 autoprune <pkg> <n>"
  echo "  removes all but the <n> most recently used cached package files"
  exit 1
}

fatal()
{
  echo "$@" >&2
#  exit 42
}

opts()
{
  if [ $# -lt 2 ]; then
    usage
  fi

  CMD="$1"
  shift

  case "$CMD" in
    find|list|prune|store)
      PKGVR="$1"
      shift

      PKGCACHEDIR="$CACHEDIR/$PKGVR"

      case "$CMD" in
        store)
          if [ $# -eq 0 ]; then
            usage
          fi
          PKGFILES="$@"
          ;;
        *)
          if [ $# -ne 0 ]; then
            usage
          fi
          ;;
      esac
      ;;
    autoprune)
      if [ $# -ne 2 ]; then
        usage
      fi
      PKG="$1"
      NUM="$2"
      shift 2
      ;;
    *)
      fatal "Unknown command: $CMD";;
  esac
}

opts "$@"

# Work around the fact that Solaris tail only supports obsolete +n syntax.
# We need to enable it explicitly for other platforms.
export _POSIX2_VERSION=1

case "$CMD" in
  find)
    if [ -d "$PKGCACHEDIR" ]; then
      # Update access time for autoprune.
      touch "$PKGCACHEDIR"
      exit 0
    else
      exit 1
    fi
    ;;
  store)
    if [ -d "$PKGCACHEDIR" ]; then
      fatal "Package $PKGVR is already cached."
    fi
    mkdir -p "$PKGCACHEDIR"

    # Force-remove cache directory if cp(1) fails, otherwise cache might become
    # inconsistent
    cp $PKGFILES "$PKGCACHEDIR" || (rm -rf "$PKGCACHEDIR"; false);;
  list)
    if [ -d "$PKGCACHEDIR" ]; then
      echo "$PKGCACHEDIR"/*
    else
      fatal "Package $PKGVR is not in cache."
    fi;;
  prune)
    if [ -d "$PKGCACHEDIR" ]; then
      rm -rf "$PKGCACHEDIR"
    else
      fatal "Package $PKGVR is not in cache."
    fi;;
  autoprune)
    for cache_entry in $(ls -dt $CACHEDIR/$PKG-* | tail +$(($NUM+1))); do
      rm -rf "$cache_entry"
    done
    ;;
esac
